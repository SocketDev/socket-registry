/** @fileoverview Generate GitHub Actions allow list from workflow and action dependencies. */

import fs from 'node:fs/promises'
import path from 'node:path'

import clipboardy from 'clipboardy'
import { logger } from '../registry/dist/lib/logger.js'
import constants from './constants.mjs'

/**
 * Extract action dependencies from a workflow or action file.
 */
async function extractDependencies(filePath) {
  const content = await fs.readFile(filePath, 'utf8')
  const dependencies = new Map()

  // Extract from uses: statements only (these have SHAs).
  const usesMatches = content.matchAll(/^\s*uses:\s*(.+)$/gm)
  for (const match of usesMatches) {
    let action = match[1].trim()
    // Remove inline comments from uses statements.
    action = action.replace(/\s+#.*$/, '')
    // Skip local actions that reference the current repo.
    if (!action.startsWith('.')) {
      // Extract owner/repo as key for deduplication.
      const atIndex = action.indexOf('@')
      if (atIndex !== -1) {
        const key = action.slice(0, atIndex)
        // Store with key to deduplicate - keep the SHA version.
        dependencies.set(key, action)
      }
    }
  }

  return dependencies
}

/**
 * Recursively find all YAML files in a directory.
 */
async function getAllYamlFiles(dir) {
  const files = []
  try {
    const entries = await fs.readdir(dir, { withFileTypes: true })
    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name)
      if (entry.isFile() && entry.name.endsWith('.yml')) {
        files.push(fullPath)
      } else if (entry.isDirectory()) {
        // Recursively search subdirectories.

        files.push(...(await getAllYamlFiles(fullPath)))
      }
    }
  } catch {}
  return files
}

/**
 * Generate and display GitHub Actions allow list.
 */
async function main() {
  const allDependencies = new Map()

  // Process workflow files.
  const workflowFiles = await getAllYamlFiles(
    constants.rootDotGithubWorkflowsPath,
  )
  for (const file of workflowFiles) {
    const deps = await extractDependencies(file)
    for (const { 0: key, 1: value } of deps.entries()) {
      allDependencies.set(key, value)
    }
  }

  // Process action files.
  const actionDirs = await fs.readdir(constants.rootDotGithubActionsPath, {
    withFileTypes: true,
  })
  for (const dir of actionDirs) {
    if (dir.isDirectory()) {
      const actionFile = path.join(
        constants.rootDotGithubActionsPath,
        dir.name,
        'action.yml',
      )
      try {
        const deps = await extractDependencies(actionFile)
        for (const { 0: key, 1: value } of deps.entries()) {
          allDependencies.set(key, value)
        }
      } catch {}
    }
  }

  // Categorize dependencies.
  const socketDevActions = []
  const externalActions = []

  for (const dep of allDependencies.values()) {
    if (dep.startsWith('SocketDev/')) {
      socketDevActions.push(dep)
    } else if (!dep.startsWith('.')) {
      externalActions.push(dep)
    }
  }

  // Sort for consistency.
  socketDevActions.sort()
  externalActions.sort()

  // Check if --exact flag was passed.
  const useExactSha = process.argv.includes('--exact')

  // Generate version wildcards or use exact SHAs.
  const allActions = [...socketDevActions, ...externalActions]
  const allowListActions = useExactSha
    ? allActions
    : allActions.map(action => {
        const atIndex = action.indexOf('@')
        return atIndex !== -1 ? `${action.slice(0, atIndex)}@*` : action
      })

  // Generate the allow list.
  // Base indentation.
  const indent = '  '

  logger.log('# GitHub Actions Allow List')
  logger.log('# Generated by scripts/generate-actions-allow-list.js')
  logger.log('')
  logger.log('## Instructions:')
  logger.log(`${indent}1. Go to your repository Settings â†’ Actions â†’ General`)
  logger.log(
    `${indent}2. Under "Actions permissions", select "Allow SocketDev, and select non-SocketDev, actions and reusable workflows"`,
  )
  logger.log(`${indent}3. Check "Allow actions created by GitHub"`)
  logger.log(
    `${indent}4. Check "Allow actions by Marketplace verified creators" (optional)`,
  )
  logger.log(
    `${indent}5. In "Allow specified actions and reusable workflows", paste the list below:`,
  )
  logger.log('')
  logger.log(
    `## Allow List${useExactSha ? ' (Exact SHAs)' : ' (Version Wildcards)'}:`,
  )
  logger.log('')

  const allowList = `${allowListActions.map(action => `${indent}${action}`).join(',\n')},`
  logger.log(allowList)

  logger.log('')
  logger.info(`Total: ${allActions.length} actions/workflows`)
  logger.log('')
  logger.info(
    'For a detailed dependency tree, run: `pnpm run generate:actions-tree`',
  )

  // Check if --copy flag was passed.
  if (process.argv.includes('--copy')) {
    try {
      // Copy the non-indented version for easier pasting.
      const clipboardList = `${allowListActions.join(',\n')},`
      clipboardy.writeSync(clipboardList)
      logger.success('Allow list copied to clipboard!')
    } catch {}
  } else {
    console.log(
      'ðŸ’¡ Tip: Run `pnpm run generate:actions-allow-list --copy` to copy the allow list to clipboard',
    )
  }

  if (!useExactSha) {
    console.log(
      'ðŸ’¡ Tip: Add `--exact` flag to generate list with exact commit SHAs instead of version wildcards',
    )
  }
}

main().catch(console.error)
