'use strict'

import fs from 'node:fs/promises'
import path from 'node:path'

import { logger } from '@socketsecurity/registry/lib/logger'

const GITHUB_PATH = '.github'
const WORKFLOWS_PATH = path.join(GITHUB_PATH, 'workflows')
const ACTIONS_PATH = path.join(GITHUB_PATH, 'actions')

async function extractDependencies(filePath) {
  const content = await fs.readFile(filePath, 'utf8')
  const dependencies = new Set()

  // Extract dependencies from # Dependencies: comment blocks.
  const dependencyMatch = content.match(/^# Dependencies:\n((?:#.+\n)+)/m)
  if (dependencyMatch) {
    const lines = dependencyMatch[1].split('\n')
    for (const line of lines) {
      // Match both top-level and nested dependencies.
      const depMatch = line.match(/^#\s+- (.+)$/)
      if (depMatch) {
        // Clean up the dependency string - remove inline comments but keep the SHA.
        let dep = depMatch[1].trim()
        // Remove inline comments like "# transitive" or "# v5.0.0".
        dep = dep.replace(/\s+#.*$/, '')
        dependencies.add(dep)
      }
    }
  }

  // Also extract from uses: statements for completeness.
  const usesMatches = content.matchAll(/^\s*uses:\s*(.+)$/gm)
  for (const match of usesMatches) {
    let action = match[1].trim()
    // Remove inline comments from uses statements.
    action = action.replace(/\s+#.*$/, '')
    // Skip local actions that reference the current repo.
    if (!action.startsWith('.')) {
      dependencies.add(action)
    }
  }

  return dependencies
}

async function getAllYamlFiles(dir) {
  const files = []
  try {
    const entries = await fs.readdir(dir, { withFileTypes: true })
    for (const entry of entries) {
      const fullPath = path.join(dir, entry.name)
      if (entry.isFile() && entry.name.endsWith('.yml')) {
        files.push(fullPath)
      } else if (entry.isDirectory()) {
        // Recursively search subdirectories.
        // eslint-disable-next-line no-await-in-loop
        files.push(...(await getAllYamlFiles(fullPath)))
      }
    }
  } catch {}
  return files
}

void (async () => {
  const allDependencies = new Set()

  // Process workflow files.
  const workflowFiles = await getAllYamlFiles(WORKFLOWS_PATH)
  for (const file of workflowFiles) {
    // eslint-disable-next-line no-await-in-loop
    const deps = await extractDependencies(file)
    for (const dep of deps) {
      allDependencies.add(dep)
    }
  }

  // Process action files.
  const actionDirs = await fs.readdir(ACTIONS_PATH, { withFileTypes: true })
  for (const dir of actionDirs) {
    if (dir.isDirectory()) {
      const actionFile = path.join(ACTIONS_PATH, dir.name, 'action.yml')
      try {
        // eslint-disable-next-line no-await-in-loop
        const deps = await extractDependencies(actionFile)
        for (const dep of deps) {
          allDependencies.add(dep)
        }
      } catch {}
    }
  }

  // Categorize dependencies.
  const socketDevActions = []
  const externalActions = []

  for (const dep of allDependencies) {
    if (dep.startsWith('SocketDev/')) {
      socketDevActions.push(dep)
    } else if (!dep.startsWith('.')) {
      externalActions.push(dep)
    }
  }

  // Sort for consistency.
  socketDevActions.sort()
  externalActions.sort()

  // Generate the allow list.
  const indent = '  ' // Base indentation.

  logger.log('# GitHub Actions Allow List')
  logger.log('# Generated by scripts/generate-actions-allow-list.js')
  logger.log()
  logger.log('## Instructions:')
  logger.log(`${indent}1. Go to your repository Settings â†’ Actions â†’ General`)
  logger.log(
    `${indent}2. Under "Actions permissions", select "Allow SocketDev, and select non-SocketDev, actions and reusable workflows"`,
  )
  logger.log(`${indent}3. Check "Allow actions created by GitHub"`)
  logger.log(
    `${indent}4. Check "Allow actions by Marketplace verified creators" (optional)`,
  )
  logger.log(
    `${indent}5. In "Allow specified actions and reusable workflows", paste the list below:`,
  )
  logger.log()
  logger.log('## Allow List:')
  logger.log()

  const allActions = [...socketDevActions, ...externalActions]
  const allowList =
    allActions.map(action => `${indent}${action}`).join(',\n') + ','
  logger.log(allowList)

  logger.log()
  logger.info(`Total: ${allActions.length} actions/workflows`)
  logger.log()
  logger.info(
    'For a detailed dependency tree, run: `pnpm run generate:actions-tree`',
  )

  // Check if --copy flag was passed.
  if (process.argv.includes('--copy')) {
    try {
      const clipboardy = await import('clipboardy')
      // Copy the non-indented version for easier pasting.
      const clipboardList = allActions.join(',\n') + ','
      clipboardy.writeSync(clipboardList)
      logger.success('Allow list copied to clipboard!')
    } catch {}
  } else {
    console.log('ðŸ’¡ Tip: Use --copy flag to copy the allow list to clipboard')
  }
})()
